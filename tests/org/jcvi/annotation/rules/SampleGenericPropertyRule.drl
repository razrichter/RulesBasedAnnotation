package org.jcvi.annotation.rules;
import org.jcvi.annotation.facts.*;
import java.util.*;

# if (HMM_HIT(ARG1, TIGR02607) && HMM_HIT(ARG2, PF05015) && CLOSE(ARG1, ARG2, 100)) 
# then assert (TOXIN_ANTITOXIN(ARG1, ARG2)
rule "sample property rule toxin antitoxin"
no-loop true

	# if (HMM_HIT(ARG1, TIGR02607) && HMM_HIT(ARG2, PF05015) && CLOSE(ARG1, ARG2, 100))
    when
        geneA : Feature( )
 		HmmHit( hitId == "TIGR02607", queryId == geneA.featureId)
        geneB : Feature( eval(geneB.isWithin(geneA, 100 )) )
 		HmmHit( hitId == "PF05015", queryId == geneB.featureId )
    then
    	System.out.println(kcontext.getRule().getName());
     	FeatureProperty toxinAntitoxin = FeatureProperty.create("TOXIN_ANTITOXIN");
    	insert(toxinAntitoxin);
 	  	modify(geneA) { addProperty(toxinAntitoxin) }
    	modify(geneB) { addProperty(toxinAntitoxin) }
end

rule "sample rule that is activated when there is a twinarg toxin_antitoxin"
no-loop true

	when
		twinargProp: FeatureProperty( id == "TWINARG" )
		antitoxinProp: FeatureProperty( id == "TOXIN_ANTITOXIN" )
		someProp: FeatureProperty( id == "SOMETHING" )
		gene : Feature( properties contains twinargProp, properties contains antitoxinProp, 
						properties not contains someProp )	
	then
		System.out.println(kcontext.getRule().getName());
		modify( gene ) { addProperty(someProp) }
end


